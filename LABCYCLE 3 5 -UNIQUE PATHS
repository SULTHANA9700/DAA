There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner
(i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The test cases are generated so that the answer will be less than or equal to 2 * 109
CONSTRAINTS:
1 <= m, n <= 100

SOURCE CODE:

#include<stdio.h>
int uniquePaths(int m, int n){
    int arr[m][n];
    for(int i=0;i<m;i++){
        arr[i][0]=1;
    }
    for(int i=0;i<n;i++){
        arr[0][i]=1;
    }
    for(int i=1;i<m;i++){
        for(int j=1;j<n;j++){
            arr[i][j]=arr[i-1][j]+arr[i][j-1];
        }
    }
    return arr[m-1][n-1];
}
void main(){
    int m,n;
    printf("enter no. of rows: m = ");
    scanf("%d",&m);
    printf("enter no. of columns: n = ");
    scanf("%d",&n);
    printf("No. of unique paths are : %d",uniquePaths(m,n));
}


OUTPUT1:
enter no. of rows: m = 3
enter no. of columns: n = 7
No. of unique paths are : 28

OUTPUT2:
enter no. of rows: m = 3
enter no. of columns: n = 2
No. of unique paths are : 3
