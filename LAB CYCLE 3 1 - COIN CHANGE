You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
You may assume that you have an infinite number of each kind of coin.

CONSTRAINTS:
1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104

SOURCE CODE:
#include<stdio.h>
int min(int a,int b){
    if(a<b){
        return a;
    }
    else{
        return b;
    }
}
int coinChange(int* coins, int coinsSize, int amount){
    int a[amount+1];
    int n=amount+1;
    a[0]=0;
    for(int i=1;i<n;i++){
        a[i]=amount+1;
    }
    for(int i=1;i<n;i++){
        for(int j=0;j<coinsSize;j++){
            if(coins[j]<=i){
                a[i]=min(a[i],1+a[i-coins[j]]);
            }
        }
    }
    if(a[amount]==amount+1){
        return -1;
    }
    else{
        return a[amount];
    }
}
void main(){
    int a,n,coins[12];
    printf("enter amount");
    scanf("%d",&a);
    printf("enter coinsSize");
    scanf("%d",&n);
    printf("enter coins");
    for(int i=0;i<n;i++){
        scanf("%d",&coins[i]);
    }
    printf("minimum number of coins that you need to make %d rupees is : %d",a,coinChange(coins,n,a));
}

OUTPUT1:
enter amount11
enter coinsSize3
enter coins1 2 5
minimum number of coins that you need to make 11 rupees is : 3

OUTPUT2:
enter amount3
enter coinsSize1
enter coins2
minimum number of coins that you need to make 3 rupees is : -1

OUTPUT3:
enter amount0
enter coinsSize1
enter coins1
minimum number of coins that you need to make 0 rupees is : 0
